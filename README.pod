=pod

=encoding UTF-8

=head1 NAME

Asset::Pack - Easily pack assets into Perl Modules that can be fat-packed

=head1 VERSION

version 0.000006

=head1 SYNOPSIS

    #!/usr/bin/env perl
    use Asset::Pack;

    # lib/MyApp/Asset/FooJS.pm will embed assets/foo.js
    write_module( 'assets/foo.js', 'MyApp::Asset::FooJS', 'lib' );

    # Or better still, this discovers them all and namespaces under MyApp::Asset
    find_and_pack( 'assets', 'MyApp::Asset' );

    # It also writes MyApp::Asset which is an index file
    require MyApp::Asset;

    # ::examplejs was built from ./assets/example.js
    # $filename => example.js
    my $filename = $MyApp::Asset::index->{'MyApp::Asset::examplejs'};

=head1 DESCRIPTION

This module allows you to construct Perl modules containing the content of
arbitrary files, which may then be installed or fat-packed.

In most cases, this module is not what you want, and you should use a
C<File::ShareDir> based system instead, but C<File::ShareDir> based systems are
inherently not fat-pack friendly.

However, if you need embedded, single-file applications, aggregating not only
Perl Modules, but templates, JavaScript and CSS, this tool will make some of
your work easier.

If anything fails it throws an exception. This is meant for scripts that will be tended by
a human (or analyzed if it fails as part of a build).

=head1 FUNCTIONS

=head2 C<write_module>

  # write_module( $source, $module, $libdir?, $metadata? );

  write_module( "./foo.js", "Foo::Bar", "./" );

  # ./Foo/Bar.pm now contains a uuencoded copy of foo.js

Given a source asset path, a module name and a library directory, packs the
source into a module named C<$module> and saves it in the right place relative
to C<$libdir>

Later, getting the file is simple:

  use Foo::Bar;
  print $Foo::Bar::content;    # File Content is a string.

=head3 options:

=over 4

=item C<$source> - A path describing where the asset is found

=item C<$module> - A target name for the generated module

=item C<$libdir> B<[optional]> - A target directory to serve as a base for modules.

Defaults to C<./lib>.

=item C<$metadata> B<[optional]> - A C<HashRef> payload of additional data to store in the module.

=back

=head2 C<write_index>

  # write_index( $index, $module, $libdir?, $metadata? );

  write_index( { "A" => "X.js" }, "Foo::Bar", "./" );

Creates a file index. This allows creation of a map of:

  "Module::Name" => "/Source/Path"

Entries that will be available in a constructed module as follows:

  use Module::Name;
  $Module::Name::index->{"Module::Name"}    # A String Path

These generated files do B<NOT> have a C<__DATA__> section

=head3 options:

=over 4

=item C<$source> - A path describing where the asset is found

=item C<$module> - A target name for the generated module

=item C<$libdir> B<[optional]> - A target directory to serve as a base for modules.

Defaults to C<./lib>.

=item C<$metadata> B<[optional]> - A C<HashRef> payload of additional data to store in the module.

=back

=head2 C<find_and_pack>

  # find_and_pack( $root_dir, $namespace_prefix, $libdir? ) -> Hash

Creates copies of all the contents of C<$root_dir> and constructs
( or reconstructs ) the relevant modules using C<$namespace_prefix>
and stores them in C<$libdir> ( which defaults to C<./lib/> )

B<Since 0.000002>:
Also generates an "index" file ( See L<< C<write_index>|/write_index >> ) at the name C<$namespace_prefix>.

Returns a hash detailing operations and results:

  {
    ok        => [ { module => ..., file => ... }, ... ],
    unchanged => [ { module => ..., file => ... }, ... ],
    fail      => [ { module => ..., file => ..., error => ... }, ... ],
  }

Index updates will be in above list except with C<< index => 1 >> instead of C<< file => >>

=head3 options:

=over 4

=item C<$root_dir> - The base path where the assets to be packed are stored

=item C<$namespace_prefix> - A module name like C<My::Asset> which will be used as the parent for generated modules.

=item C<$libdir> B<[optional]> - The target directory to generate the Modules in.

Defaults to C<./lib>.

=back

=head1 SEE ALSO

=over 4

=item * L<< C<App::FatPacker>|App::FatPacker >>

C<App::FatPacker> is the primary module C<Asset::Pack> is targeted at. C<AssetPack>
creates C<Perl Modules> in a format compatible with C<App::FatPacker> to enable embedding
arbitrary resources in your single-file application.

=item * L<< C<App::Implode>|App::Implode >>

C<App::Implode> is like C<App::FatPacker>, except uses L<< C<Carton>|Carton >> and C<cpanfile>'s
to build your app tree. This should be compatible with C<Asset::Pack> and bugs involving it will
certainly be looked into.

=item * L<< C<App::FatPacker::Simple>|App::FatPacker::Simple >>

Again, Similar in intent to C<App::FatPacker>, offering a few different features, but
is more manually operated. This module may work in conjunction with it.

=item * L<< C<Module::FatPack>|Module::FatPack >>

Similar goals as C<App::FatPacker>, but not quite so well engineered. This code will
probably work with that, but is at this time officially unsupported.

=item * L<< C<Module::DataPack>|Module::DataPack >>

This is basically a clone of C<Module::FatPack> except has the blobs stored in your scripts
C<__DATA__> section instead of being a hash of strings.

Given this module I<also> exploits C<__DATA__>, there may be potential risks involved with this module.
And as such, this is not presently officially supported, nor has it been tested.

=item * L<< C<Data::Embed>|Data::Embed >>

C<Data::Embed> is probably more similar than all the rest listed to what C<Asset::Pack> does,
except: it doesn't use built-in C<Perl> mechanics, will probably not be C<FatPacker> friendly, and its
implementation relies on C<Data::Embed> being present to extract embedded data.

Whereas C<Asset::Pack> is implemented as a simple C<Perl Module> building utility, which generates
independent files which will perform like native C<Perl Module>'s when used.

=back

=head1 PERL LEGACY SUPPORT

At present, this distribution only works on C<< Perl >=5.8 >>. ( Though the files it
B<generates> should work as-is on C<5.6> )

This is mostly due to its dependencies:

=over 4

=item * L<< C<Path::Tiny>|Path::Tiny >> is used extensively for mechanics, but C<Path::Tiny>
does not presently (Circa C<0.72>) work on C<< Perl <5.8 >>
(L<< details on C<GitHub>|https://github.com/dagolden/Path-Tiny/issues/145 >>)

=item * L<< C<Test::Differences>|Test::Differences >> is used a fair bit in tests, and
it won't auto-install on 5.6. But careful selection of dependencies will get you a
working install

=over 4

=item * C<< SMUELLER/Data-Dumper-2.128.tar.gz >> is newest version of Data::Dumper that
works on C<5.6.2>, versions C<2.130_03> to C<2.154> presently fail.

=item * C<< OVID/Test-Differences-0.61.tar.gz >> is the newest version of
Test::Differences that works on C<5.6.2>, versions C<0.61_01> to C<0.63> presently fail.

=back

=item * L<< C<Test::TempDir::Tiny>|Test::TempDir::Tiny >> is used a fair bit in tests as
well, and as of C<0.005-TRIAL>, C<5.6> support is
L<< still lacking|https://github.com/dagolden/Test-TempDir-Tiny/issues/9 >>, albeit support is
L<< intended|https://github.com/dagolden/Test-TempDir-Tiny/commit/bbf9f899ddee1959867e1ad3a4830bea5400f1ef >>

=back

The maintainer of this module will however accept patches to get closer to full 5.6 support where it
makes sense to, at the request of interested parties.

=head1 AUTHOR

James Laver <james.laver@gmail.com>

=head1 CONTRIBUTOR

=for stopwords Kent Fredric

Kent Fredric <kentnl@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2015 by James Laver on time generously donated by Anomalio.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
